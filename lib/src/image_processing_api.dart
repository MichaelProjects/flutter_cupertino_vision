// Autogenerated from Pigeon (v13.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum ImageOrientation {
  up,
  down,
  left,
  right,
}

class InputImageData {
  InputImageData({
    required this.width,
    required this.height,
    required this.orientation,
    required this.data,
  });

  int width;

  int height;

  ImageOrientation orientation;

  Uint8List data;

  Object encode() {
    return <Object?>[
      width,
      height,
      orientation.index,
      data,
    ];
  }

  static InputImageData decode(Object result) {
    result as List<Object?>;
    return InputImageData(
      width: result[0]! as int,
      height: result[1]! as int,
      orientation: ImageOrientation.values[result[2]! as int],
      data: result[3]! as Uint8List,
    );
  }
}

class BoundingBox {
  BoundingBox({
    required this.left,
    required this.top,
    required this.width,
    required this.height,
  });

  double left;

  double top;

  double width;

  double height;

  Object encode() {
    return <Object?>[
      left,
      top,
      width,
      height,
    ];
  }

  static BoundingBox decode(Object result) {
    result as List<Object?>;
    return BoundingBox(
      left: result[0]! as double,
      top: result[1]! as double,
      width: result[2]! as double,
      height: result[3]! as double,
    );
  }
}

class VisionResponse {
  VisionResponse({
    required this.boundingBox,
    required this.confidence,
    required this.candiates,
  });

  BoundingBox boundingBox;

  double confidence;

  List<String?> candiates;

  Object encode() {
    return <Object?>[
      boundingBox.encode(),
      confidence,
      candiates,
    ];
  }

  static VisionResponse decode(Object result) {
    result as List<Object?>;
    return VisionResponse(
      boundingBox: BoundingBox.decode(result[0]! as List<Object?>),
      confidence: result[1]! as double,
      candiates: (result[2] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class _ImageProcessingApiCodec extends StandardMessageCodec {
  const _ImageProcessingApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BoundingBox) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is InputImageData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is VisionResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return BoundingBox.decode(readValue(buffer)!);
      case 129: 
        return InputImageData.decode(readValue(buffer)!);
      case 130: 
        return VisionResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ImageProcessingApi {
  /// Constructor for [ImageProcessingApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ImageProcessingApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ImageProcessingApiCodec();

  Future<List<VisionResponse?>> imageToText(InputImageData arg_imageData) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_cupertino_vision.ImageProcessingApi.imageToText', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_imageData]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<VisionResponse?>();
    }
  }

  Future<List<VisionResponse?>> documentDetection(InputImageData arg_imageData) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_cupertino_vision.ImageProcessingApi.documentDetection', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_imageData]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<VisionResponse?>();
    }
  }
}
